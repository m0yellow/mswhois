#!/usr/bin/python

import socket, re, sys, ipaddress
from time import strftime
from csv import DictReader

LISTEN_ADDRESS	=	"127.0.0.1"
LISTEN_PORT	=	8043
MAX_QUERY_SIZE	=	128

#	Sanitize the query received
def sanitizeQuery(qr):
	qr = re.findall('[abcdef1234567890.:/]+',str(qr))
	qr = ''.join(qr)
	return qr

# load data from csv
def loadCSV(ipdb):
    csvfile = DictReader(open('../ipdb.csv', 'r'))
    for entry in csvfile:
        ipdb[entry["network"]] = entry

# loop through ipdb in search for a match,
# if a match is found, it is checked against any further match,
# which is better
def checkipdb(ipdb,query):
    response = ""
    for key,value in ipdb.items():
        try:
            dbresult = ipaddress.ip_network(value["network"])
        except Exception as e:
            print(e)
            break
        if ( type(query) != type(dbresult) ):
            continue 
        if ( query == dbresult ):
#            print("exact match.",dbresult)
            return dbresult
            break
        if ( response == "" ):
            if query.subnet_of(dbresult):
#                print("first match",dbresult)
                response = dbresult
        else:
            if query.subnet_of(dbresult):
                if dbresult.subnet_of(response):
#                    print("further match",dbresult)
                    response = dbresult 
    return response
	 

# define linebreak, empty ipdb, and load it
n =  "\r\n"
ipdb = {}
loadCSV(ipdb)

# accept socket as defined above 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	s.bind((LISTEN_ADDRESS, LISTEN_PORT))
except:
	print("Could not bind specified IP or Port. Already in use? Not privileged for this port?")
	exit(2)

s.listen(1)

# if we break out here, we do it in an error.
# there should be a proper closing of the socket when receiving SIG...
while True:
	con, adr = s.accept()
	print( "[" + strftime("%d/%m/%Y %H:%M:%S") + "] " + adr[0] + " - ")
	query = con.recv(MAX_QUERY_SIZE)
	if not query:
		break
	# we got so far, then we remove anything which isn't a symbol of an IP
	query = sanitizeQuery(query.decode())	

	# server header, got the idea from the project I got the idea from
	rsp = ""	
	rsp = rsp + "# +--------------------------------------+" + n
	rsp = rsp + "# |  This query was served by m(s)whois  |" + n
	rsp = rsp + "# +--------------------------------------+" + n

	# now we start the interesting part, we try to assign the query
	# if it isn't recognized as any kind of ip address, we won't work with it
	try:
		query = ipaddress.ip_network(query,strict=False)
	except:
		query = ""
	# I'm not sure if it is a great idea in giving back the query, 
	# but for now it is a great debug helper
	rsp = rsp + "# + I got your query as " + str(type(query)) + " " +str(query) + n 
	rsp = rsp + n

	# now we reached the part of actually running through the DB for results
	result = ""
	result = checkipdb(ipdb,query)
	if ( result == "" ):
		rsp = rsp + "nothing found."
	else:
		# we do some special formatting for single addresses, or traditional inetXnums
		if ( result.num_addresses > 1 ):
			rsp = rsp + "resource:\t" + str(result[0]) + " - " + str(result[-1]) + n
		else:
			rsp = rsp + "resource:\t" + str(result) + n
		# the keys are the column names from the CSV, they could be in any order
		rsp = rsp + "usage:\t\t" + ipdb[str(result)]['usage'] + n
		rsp = rsp + "description:\t" + ipdb[str(result)]['description'] + n
		rsp = rsp + "customer_name:\t" + ipdb[str(result)]['customer_name'] + n
#		rsp = rsp + "created:\t" + ipdb[str(result)]['createdat'] + n
#		rsp = rsp + "created by:\t" + ipdb[str(result)]['createdby'] + n
		rsp = rsp + "last-modified:\t" + ipdb[str(result)]['changedat'] + n
		rsp = rsp + "changed by:\t" + ipdb[str(result)]['changedby'] + n
		# print(ipdb[str(result)])

	rsp = rsp + n
	# I decided to encode some funny chars as UTF-8, so it fits modern terminals
	con.sendall(rsp.encode('utf-8'))
	con.close()
