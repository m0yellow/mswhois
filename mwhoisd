#!/usr/bin/python


import socket, re, sys, ipaddress
from time import strftime
from netaddr import IPAddress, IPNetwork 
from csv import DictReader
import sys

LISTEN_ADDRESS	=	"127.0.0.1"
LISTEN_PORT	=	8043
MAX_QUERY_SIZE	=	128
n               =       "\r\n"



s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	s.bind((LISTEN_ADDRESS, LISTEN_PORT))
except:
	print("Could not bind specified IP or Port. Already in use? Not privileged for this port?")
	exit(2)
s.listen(1)

#	Sanitize the query received
def sanitizeQuery(qr):
	#qr = re.search('^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}$',str(qr))
	# qr = qr.lower()
	# qr = qr.replace("..", ".")
	# qr = qr.replace("/", "")
	qr = qr.replace("\\", "")
	qr = qr.replace("\r", "")
	qr = qr.replace("\n", "")
	return qr

# Check if the input is a valid IPv4 Address
def isIP(qr):
	bytez = qr.split(".")
	if(len(bytez) != 4):
		return False
	for byt in bytez:
		if(not byt.isdigit()):
			return False
	ipaddr = [int(bytez[0]), int(bytez[1]), int(bytez[2]), int(bytez[3])]
	for num in ipaddr:
		if(num < 0 or num > 255):
			return False
	return True

# Check if the input is a valid domain name
def isDomain(qr):
	if(len(qr.split(".")) == 1):
		return False
	zones = qr.split(".")
	ac = re.compile("^[a-z0-9\.-]+\n")
	for zone in zones:
		if(zone == ""):
			return False
		if(zone[0] == "-"):
			return False
		if(zone[-1] == "-"):
			return False
		if(ac.match(zone + "\n")):
			pass
		else:
			return False
	return True

# Check if an IP belongs to a CIDR IP block
def isIPinCIDR(ip, network):
	return IPAddress(ip) in IPNetwork(network)

# load data from csv
def loadCSV(ipdb):
    csvfile = DictReader(open('../ipdb.csv', 'r'))
    for entry in csvfile:
        ipdb[entry["network"]] = entry

def checkipdb(ipdb,query):
    response = ""
    for key,value in ipdb.items():
        try:
            dbresult = ipaddress.IPv4Network(value["network"])
        except:
            break
        if ( query == dbresult ):
            # print("exact match.",dbresult)
            return dbresult
            break
        if ( response == "" ):
            if query.subnet_of(dbresult):
                # print("first match",dbresult)
                response = dbresult
        else:
            if query.subnet_of(dbresult):
                # print("further match",dbresult)
                response = dbresult 
    return response
	 
ipdb = {}
loadCSV(ipdb)

while True:
	#log = "[" + strftime("%d/%m/%Y %H:%M:%S") + "] " + adr[0] + " - "

	while True:
		con, adr = s.accept()
		query = con.recv(MAX_QUERY_SIZE)
		if not query:
			break
		query = sanitizeQuery(query.decode())	
		# query = query.decode()
	
		rsp = ""	
		rsp = rsp + "# +--------------------------------------+" + n
		rsp = rsp + "# |  This query was served by m(s)whois  |" + n
		rsp = rsp + "# +--------------------------------------+" + n
		rsp = rsp + n

		try:
			query = ipaddress.ip_network(query)
			# query = ipaddress.IPv4Network(u'10.10.10.10')	
			result = checkipdb(ipdb,query)
		except:
			result = ""
		if ( result == "" ):
			rsp = rsp + "nothing found."
		else:
			if ( result.num_addresses > 1 ):
				rsp = rsp + "resource:\t" + str(result[1]) + " - " + str(result[-1]) + n
			else:
				rsp = rsp + "resource:\t" + str(result) + n
			rsp = rsp + "usage:\t\t" + ipdb[str(result)]['usage'] + n
			rsp = rsp + "description:\t" + ipdb[str(result)]['description'] + n
			rsp = rsp + "customer_name:\t" + ipdb[str(result)]['customer_name'] + n
#			rsp = rsp + "created:\t" + ipdb[str(result)]['createdat'] + n
#			rsp = rsp + "created by:\t" + ipdb[str(result)]['createdby'] + n
			rsp = rsp + "changed:\t" + ipdb[str(result)]['changedat'] + n
			rsp = rsp + "changed by:\t" + ipdb[str(result)]['changedby'] + n
			# print(ipdb[str(result)])

		rsp = rsp + n
		con.sendall(rsp.encode('utf-8'))
		con.close()
